/*********インデックスショットガン（闇雲インデックス）***********/

/*アンチパターン:闇雲にインデックスを使用

インデックスの更新でDBにオーバーヘッドが生じるため、一部の開発者は、インデックスを排除しようとする
一般にテーブルに対するクエリ発行回数の方が、テーブルの更新回数よりも多いため目的の行を素早く見つけられるなど
メリットが享受しやすい
*/
CREATE TABLE Bugs (
	bug_id SERIAL PRIMARY KEY,
	date_reported DATE NOT NULL,
	summary VARCHAR(80) NOT NULL,
	status VARCHAR(10) NOT NULL,
	hours NUMERIC(9,2),
	INDEX (bug_id) ---1
	INDEX (summary) ---2
	INDEX (hours) ---3
	INDEX (bug_id, date_reported, status) ---4
);
/*
1.主キーのインデックスを自動的に作成されるので冗長
2．VARCHAR(80)など長い文字列だとインデックスのサイズが膨らむ
3.hours列に対して検索や、ソートを実行することはなさそう
4．複合インデックスの多くは冗長で使用頻度が少なくなりやすい
また列の順序が重要で検索、条件、結合条件、ソート順において、列を定義した順に使用する必要あり
*/

/*解決策「MENTOR」の原則に基づいて管理
Measure（測定）最も多くの時間を消費するクエリを特定
Explain（解析）クエリの処理が遅くなっている原因を解析
Nominate（指名）クエリがインデックスを使用しないでテーブルにアクセスしている箇所を探す
Test（テスト）効果の確認
Optimize（最適化）インデックスはコンパクトでキャッシュメモリに格納されやすくなる
　　　　　　　　　　LOAD INDEX INTO CACHEステートメントで明示的に設定も出来る
Rebuild（再構築）　行の更新や削除で、インデックスは不均等になるのでメンテする
*/
